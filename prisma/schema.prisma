// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// --- Admin Model ---
model Admin{
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}


// --- User Model ---
model User {
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole
  needPasswordChange Boolean @default(true)
  status UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  admin Admin?
  doctor Doctor?
  patient Patient?

  @@map("users")
}


// --- Doctor Model ---
model Doctor {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  registrationNumber String
  experience Int @default(0)
  gender Gender
  appointmentFee Int
  qualification String
  currentWorkingPlace String
  designation String
  isDeleted Boolean @default(false)
  averageRating Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [email], references: [email])
  doctorSpecialties DoctorSpecialties[]
}


// Specialties Model
model Specialties{
  id String @id @default(uuid())
  title String
  icon String
  doctorSpecialties DoctorSpecialties[]
}

// DoctorSpecialties Model
model DoctorSpecialties {
  specialtiesId String
  doctorId      String

  specialties Specialties @relation(fields: [specialtiesId], references: [id])
  doctor Doctor @relation(fields: [doctorId], references: [id])
  @@id([specialtiesId, doctorId])
}

// Patient Model
model Patient{
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [email], references: [email])
  patientHealthData PatientHealthData?
  medicalReports MedicalReport[]
  @@map("patients")

}

//  Patient Health Data
model PatientHealthData{
  id String @id @default(uuid())
  patientId String @unique
  patient Patient @relation(fields: [patientId], references: [id])
  dateOfBirth String
  gender Gender
  bloodGroup BloodGroup
  hasAllergies Boolean
  hasDiabetes Boolean
  height String
  weight String
  smokingStatus Boolean
  dietaryPreferences String
  pregnancyStatus Boolean
  mentalHealthHistory String
  immunizationStatus String
  hasPastSurgeries Boolean
  recentAnxiety Boolean
  recentDepression Boolean
  maritalStatus MaritalStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


//  MedicalReport Model
model MedicalReport {
  id String @id @default(uuid())
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
//  === Enums Here ===
enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus { 
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
 FEMALE
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}